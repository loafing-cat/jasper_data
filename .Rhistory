# theme_clean() +
theme(legend.position = "none")
p3
###
# violin with dotplot
p3 <- daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%  # filter origin data to only where complete week data available
group_by(week) %>%
mutate(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE), # compute mean/median weight to add to boxplots
median_weight = median(`Weight (lbs)`, na.rm = TRUE),
max_weight = max(`Weight (lbs)`, na.rm = TRUE)  # calculate max weight per week
) %>%
ungroup() %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(aes(x = week, y = `Weight (lbs)`, fill = factor(week))) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
# geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 2) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.25, fill = "black") +
geom_point(aes(x = week, y = mean_weight), color = "red", size = 3) +
geom_line(aes(x = week, y = mean_weight, group = 1)) +
geom_text(
aes(x = week, y = max_weight + 0.25, label = sprintf('Mean: %.2f lbs', mean_weight)),  # adjust y using max_weight
vjust = 1,
color = 'red'
) +
geom_text(
aes(x = week, y = max_weight + 0.15, label = sprintf('Median: %.2f lbs', median_weight)),  # adjust y using max_weight
vjust = 1,
color = 'blue'
) +
# geom_text(
#   aes(x = week, y = mean_weight, label = sprintf('Mean: %.2f lbs', mean_weight)),
#   vjust = 2.5,
#   color = 'red'
# ) +
# geom_text(
#   aes(x = week, y = median_weight, label = sprintf('Median: %.2f lbs', median_weight)),
#   vjust = -1.5,
#   color = 'blue'
# ) +
geom_text(
data = mean_weights,
aes(x = midpoint, y = 9.7, label = sprintf('Change: %.2f lbs', delta)),
vjust = -0.5,
color = 'black',
size = 10
) +
labs(x = 'Week',
y = 'Weight (lbs)',
title = "Jasper's Weight (lbs) Distribution",
subtitle = paste0(format(min(complete_weeks$Day), "%m/%d/%Y"), ' - ' , format(max(complete_weeks$Day), "%m/%d/%Y"))
) +
scale_fill_manual(values = custom_colors) +
scale_y_continuous(expand = c(0, 0), n.breaks = 8) +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(unique(complete_weeks$week)))) +
# theme_minimal() +
theme_bw() +
# theme_clean() +
theme(legend.position = "none")
p3
###
# violin with dotplot
p3 <- daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%  # filter origin data to only where complete week data available
group_by(week) %>%
mutate(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE), # compute mean/median weight to add to boxplots
median_weight = median(`Weight (lbs)`, na.rm = TRUE),
max_weight = max(`Weight (lbs)`, na.rm = TRUE)  # calculate max weight per week
) %>%
ungroup() %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(aes(x = week, y = `Weight (lbs)`, fill = factor(week))) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
# geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 2) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.25, fill = "black") +
geom_point(aes(x = week, y = mean_weight), color = "red", size = 3) +
geom_line(aes(x = week, y = mean_weight, group = 1)) +
geom_text(
aes(x = week, y = max_weight + 0.25, label = sprintf('Mean: %.2f lbs', mean_weight)),  # adjust y using max_weight
vjust = 1,
color = 'red'
) +
geom_text(
aes(x = week, y = max_weight + 0.15, label = sprintf('Median: %.2f lbs', median_weight)),  # adjust y using max_weight
vjust = 1,
color = 'blue'
) +
# geom_text(
#   aes(x = week, y = mean_weight, label = sprintf('Mean: %.2f lbs', mean_weight)),
#   vjust = 2.5,
#   color = 'red'
# ) +
# geom_text(
#   aes(x = week, y = median_weight, label = sprintf('Median: %.2f lbs', median_weight)),
#   vjust = -1.5,
#   color = 'blue'
# ) +
geom_text(
data = mean_weights,
aes(x = midpoint, y = 9.7, label = sprintf('Change: %.2f lbs', delta)),
vjust = -0.5,
color = 'black'
) +
labs(x = 'Week',
y = 'Weight (lbs)',
title = "Jasper's Weight (lbs) Distribution",
subtitle = paste0(format(min(complete_weeks$Day), "%m/%d/%Y"), ' - ' , format(max(complete_weeks$Day), "%m/%d/%Y"))
) +
scale_fill_manual(values = custom_colors) +
scale_y_continuous(expand = c(0, 0), n.breaks = 8) +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(unique(complete_weeks$week)))) +
# theme_minimal() +
theme_bw() +
# theme_clean() +
theme(legend.position = "none")
p3
###
# violin with dotplot
p3 <- daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%  # filter origin data to only where complete week data available
group_by(week) %>%
mutate(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE), # compute mean/median weight to add to boxplots
median_weight = median(`Weight (lbs)`, na.rm = TRUE),
max_weight = max(`Weight (lbs)`, na.rm = TRUE)  # calculate max weight per week
) %>%
ungroup() %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(aes(x = week, y = `Weight (lbs)`, fill = factor(week))) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
# geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 2) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.25, fill = "black") +
geom_point(aes(x = week, y = mean_weight), color = "red", size = 3) +
geom_line(aes(x = week, y = mean_weight, group = 1)) +
geom_text(
aes(x = week, y = max_weight + 0.25, label = sprintf('Mean: %.2f lbs', mean_weight)),  # adjust y using max_weight
vjust = 1,
color = 'red'
) +
geom_text(
aes(x = week, y = max_weight + 0.15, label = sprintf('Median: %.2f lbs', median_weight)),  # adjust y using max_weight
vjust = 1,
color = 'blue'
) +
# geom_text(
#   aes(x = week, y = mean_weight, label = sprintf('Mean: %.2f lbs', mean_weight)),
#   vjust = 2.5,
#   color = 'red'
# ) +
# geom_text(
#   aes(x = week, y = median_weight, label = sprintf('Median: %.2f lbs', median_weight)),
#   vjust = -1.5,
#   color = 'blue'
# ) +
geom_text(
data = mean_weights,
aes(x = midpoint, y = 9.7, label = sprintf('Change: %.2f lbs', delta)),
vjust = -0.5,
color = 'black',
size = 1
) +
labs(x = 'Week',
y = 'Weight (lbs)',
title = "Jasper's Weight (lbs) Distribution",
subtitle = paste0(format(min(complete_weeks$Day), "%m/%d/%Y"), ' - ' , format(max(complete_weeks$Day), "%m/%d/%Y"))
) +
scale_fill_manual(values = custom_colors) +
scale_y_continuous(expand = c(0, 0), n.breaks = 8) +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(unique(complete_weeks$week)))) +
# theme_minimal() +
theme_bw() +
# theme_clean() +
theme(legend.position = "none")
p3
###
# violin with dotplot
p3 <- daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%  # filter origin data to only where complete week data available
group_by(week) %>%
mutate(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE), # compute mean/median weight to add to boxplots
median_weight = median(`Weight (lbs)`, na.rm = TRUE),
max_weight = max(`Weight (lbs)`, na.rm = TRUE)  # calculate max weight per week
) %>%
ungroup() %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(aes(x = week, y = `Weight (lbs)`, fill = factor(week))) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
# geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 2) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.25, fill = "black") +
geom_point(aes(x = week, y = mean_weight), color = "red", size = 3) +
geom_line(aes(x = week, y = mean_weight, group = 1)) +
geom_text(
aes(x = week, y = max_weight + 0.25, label = sprintf('Mean: %.2f lbs', mean_weight)),  # adjust y using max_weight
vjust = 1,
color = 'red'
) +
geom_text(
aes(x = week, y = max_weight + 0.15, label = sprintf('Median: %.2f lbs', median_weight)),  # adjust y using max_weight
vjust = 1,
color = 'blue'
) +
# geom_text(
#   aes(x = week, y = mean_weight, label = sprintf('Mean: %.2f lbs', mean_weight)),
#   vjust = 2.5,
#   color = 'red'
# ) +
# geom_text(
#   aes(x = week, y = median_weight, label = sprintf('Median: %.2f lbs', median_weight)),
#   vjust = -1.5,
#   color = 'blue'
# ) +
geom_text(
data = mean_weights,
aes(x = midpoint, y = 9.7, label = sprintf('Change: %.2f lbs', delta)),
vjust = -0.5,
color = 'black',
size = 5
) +
labs(x = 'Week',
y = 'Weight (lbs)',
title = "Jasper's Weight (lbs) Distribution",
subtitle = paste0(format(min(complete_weeks$Day), "%m/%d/%Y"), ' - ' , format(max(complete_weeks$Day), "%m/%d/%Y"))
) +
scale_fill_manual(values = custom_colors) +
scale_y_continuous(expand = c(0, 0), n.breaks = 8) +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(unique(complete_weeks$week)))) +
# theme_minimal() +
theme_bw() +
# theme_clean() +
theme(legend.position = "none")
p3
###
# violin with dotplot
p3 <- daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%  # filter origin data to only where complete week data available
group_by(week) %>%
mutate(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE), # compute mean/median weight to add to boxplots
median_weight = median(`Weight (lbs)`, na.rm = TRUE),
max_weight = max(`Weight (lbs)`, na.rm = TRUE)  # calculate max weight per week
) %>%
ungroup() %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(aes(x = week, y = `Weight (lbs)`, fill = factor(week))) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
# geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 2) +
geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 0.25, fill = "black") +
geom_point(aes(x = week, y = mean_weight), color = "red", size = 3) +
geom_line(aes(x = week, y = mean_weight, group = 1)) +
geom_text(
aes(x = week, y = max_weight + 0.25, label = sprintf('Mean: %.2f lbs', mean_weight)),  # adjust y using max_weight
vjust = 1,
color = 'red'
) +
geom_text(
aes(x = week, y = max_weight + 0.15, label = sprintf('Median: %.2f lbs', median_weight)),  # adjust y using max_weight
vjust = 1,
color = 'blue'
) +
# geom_text(
#   aes(x = week, y = mean_weight, label = sprintf('Mean: %.2f lbs', mean_weight)),
#   vjust = 2.5,
#   color = 'red'
# ) +
# geom_text(
#   aes(x = week, y = median_weight, label = sprintf('Median: %.2f lbs', median_weight)),
#   vjust = -1.5,
#   color = 'blue'
# ) +
geom_text(
data = mean_weights,
aes(x = midpoint, y = 9.7, label = sprintf('Change: %.2f lbs', delta)),
vjust = -0.5,
color = 'black',
size = 3
) +
labs(x = 'Week',
y = 'Weight (lbs)',
title = "Jasper's Weight (lbs) Distribution",
subtitle = paste0(format(min(complete_weeks$Day), "%m/%d/%Y"), ' - ' , format(max(complete_weeks$Day), "%m/%d/%Y"))
) +
scale_fill_manual(values = custom_colors) +
scale_y_continuous(expand = c(0, 0), n.breaks = 8) +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(unique(complete_weeks$week)))) +
# theme_minimal() +
theme_bw() +
# theme_clean() +
theme(legend.position = "none")
p3
# dynamically save ggplot
ggsave(
filename = paste0(here("images", "violin", "jasper_mean_weight_violin_weekly_time_series"), format(Sys.Date(), "_%Y_%m_%d"), ".png"),
plot = p3,
dpi = 600,
width = 12,
height = 8
)
# clear environment
rm(list = ls()); gc()
# load or install necessary libraries
pacman::p_load(tidyverse, rio, here, googlesheets4, ggsci, lubridate, dotenv, ggthemes, zoo)
biomarker_data <- import(here("output data", "cbc_chem_updated.csv"))
reference_table <- import(here("input data", "biomarker_reference_table.csv"))
biomarker_data <- biomarker_data %>%
group_by(metric) %>%
arrange(date_updated) %>%
mutate(observation = row_number())
# Join biomarker data with reference table
joined_data <- biomarker_data %>%
left_join(reference_table, by = c("metric" = "biomarkers")) %>%
filter(metric %in% c("WBC", "Total Protein", "RBC", "Albumin: Globulin Ratio", "Eosinophils", "Lymphocytes", "ALP", "ALT", "Basophils", "Monocytes", "Platelets", "Albumin", "Globulin"))
# Normalize data using the existing 'min' and 'max' columns
joined_data <- joined_data %>%
mutate(
norm_value = (as.numeric(value) - min) / (max - min),
norm_min_ref = 0,  # Minimum of range after normalization
norm_max_ref = 1   # Maximum of range after normalization
)
# Plot using ggplot2
p1 <- ggplot(joined_data, aes(x = metric, y = norm_value, color = as.factor(observation), shape = as.factor(observation))) +
geom_errorbar(aes(ymin = norm_min_ref, ymax = norm_max_ref), color = "black", width = 0.2) +
geom_point(size = 4) +  # Increased size for better visibility
scale_shape_manual(values=c(16, 17, 15)) +  # Manually specify shapes, e.g., 16 = solid circle, 17 = solid triangle
scale_color_lancet() +
labs(title = "Normalized Biomarker Values with Reference Bands",
x = "Biomarker",
y = "Normalized Value (0-1)",
color = "Observation",
shape = "Observation") +  # Label for shape legend
theme_bw()
p1
ggsave(
filename = here("images", "archive", "biomarker_graph_demo.png"),
plot = p1,
dpi = 600,
width = 12,
height = 8
)
joined_data2 <- joined_data
joined_data2 <- joined_data2 %>%
mutate(metric = factor(metric, levels = c("Albumin: Globulin Ratio", "Albumin", "Globulin", "Total Protein", "ALP", "ALT", "WBC", "RBC", "Platelets", "Eosinophils", "Basophils", "Lymphocytes", "Monocytes")))
# Plot using ggplot2
p2 <- ggplot(joined_data2, aes(x = metric, y = norm_value, color = as.factor(observation), shape = as.factor(observation))) +
geom_errorbar(aes(ymin = norm_min_ref, ymax = norm_max_ref), color = "black", width = 0.2) +
geom_point(aes(shape = as.factor(observation)), size = 4) +  # Increased size for better visibility
scale_color_lancet() +
labs(title = "Normalized Biomarkers",
x = "",
y = "Normalized Value",
color = "Observation",
shape = "Observation") +  # Label for shape legend
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "right",
axis.title.x = element_blank())
p2
ggsave(
filename = here("images", "archive", "biomarker_graph_demo_v2.png"),
plot = p2,
dpi = 600,
width = 14,
height = 8
)
rm(list = ls()); gc()
pacman::p_load(tidyverse, rio, here, googlesheets4, ggsci, lubridate, dotenv, ggthemes, zoo)
# import data
biomarker_data <- import(here("output data", "cbc_chem_updated.csv"))
reference_table <- import(here("input data", "biomarker_reference_table.csv"))
# use row_number() to create values for dot type/colors
biomarker_data <- biomarker_data %>%
group_by(metric) %>%
arrange(date_updated) %>%
mutate(observation = row_number())
# join biomarker data with reference table
joined_data <- biomarker_data %>%
left_join(reference_table, by = c("metric" = "biomarkers")) %>%
filter(metric %in% c("WBC", "Total Protein", "RBC", "Albumin: Globulin Ratio", "Eosinophils", "Lymphocytes", "ALP", "ALT", "Basophils", "Monocytes", "Platelets", "Albumin", "Globulin"))
# normalize data (min-max method)
joined_data <- joined_data %>%
mutate(
norm_value = (as.numeric(value) - min) / (max - min),
norm_min_ref = 0,
norm_max_ref = 1
)
joined_data <- joined_data %>%
mutate(metric = factor(metric, levels = c("Albumin: Globulin Ratio", "Albumin", "Globulin", "Total Protein", "ALP", "ALT", "WBC", "RBC", "Platelets", "Eosinophils", "Basophils", "Lymphocytes", "Monocytes")))
# Plot using ggplot2
p1 <- ggplot(joined_data, aes(x = metric, y = norm_value, color = as.factor(observation), shape = as.factor(observation))) +
geom_errorbar(aes(ymin = norm_min_ref, ymax = norm_max_ref), color = "black", width = 0.2) +
geom_point(aes(shape = as.factor(observation)), size = 4) +  # Increased size for better visibility
scale_color_lancet() +
labs(title = "Normalized Biomarkers",
x = "",
y = "Normalized Value",
color = "Observation",
shape = "Observation") +  # Label for shape legend
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "right",
axis.title.x = element_blank())
p1
rm(list = ls()); gc()
pacman::p_load(tidyverse, rio, here, googlesheets4, ggsci, lubridate, dotenv, ggthemes, zoo)
# import data
biomarker_data <- import(here("output data", "cbc_chem_updated.csv"))
reference_table <- import(here("input data", "biomarker_reference_table.csv"))
# use row_number() to create values for dot type/colors
biomarker_data <- biomarker_data %>%
group_by(metric) %>%
arrange(date_updated) %>%
mutate(observation = row_number())
# join biomarker data with reference table
joined_data <- biomarker_data %>%
left_join(reference_table, by = c("metric" = "biomarkers")) %>%
filter(metric %in% c("WBC", "Total Protein", "RBC", "Albumin: Globulin Ratio", "Eosinophils", "Lymphocytes", "ALP", "ALT", "Basophils", "Monocytes", "Platelets", "Albumin", "Globulin"))
# normalize data (min-max method)
joined_data <- joined_data %>%
mutate(
norm_value = (as.numeric(value) - min) / (max - min),
norm_min_ref = 0,
norm_max_ref = 1
)
joined_data <- joined_data %>%
mutate(metric = factor(metric, levels = c("Albumin: Globulin Ratio", "Albumin", "Globulin", "Total Protein", "ALP", "ALT", "WBC", "RBC", "Platelets", "Eosinophils", "Basophils", "Lymphocytes", "Monocytes")))
# Plot using ggplot2
p1 <- ggplot(joined_data, aes(x = metric, y = norm_value, color = as.factor(observation), shape = as.factor(observation))) +
geom_errorbar(aes(ymin = norm_min_ref, ymax = norm_max_ref), color = "black", width = 0.2) +
geom_point(aes(shape = as.factor(observation)), size = 4) +  # Increased size for better visibility
scale_color_lancet() +
labs(title = "Normalized Biomarkers",
x = "",
y = "Normalized Value",
color = "Observation",
shape = "Observation") +  # Label for shape legend
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "right",
axis.title.x = element_blank())
p1
ggsave(
filename = paste0(here("images", "biomarkers", "biomarkers_graph"), format(Sys.Date(), "_%Y_%m_%d"), ".png"),
plot = p1,
dpi = 600,
width = 14,
height = 8
)
###
# pull out the most recent plots for each variant and place it into images directory
boxplot_directory <- here("images", "boxplot")
line_directory <- here("images", "line")
violin_directory <- here("images", "violin")
biomakers_directory <- here("images", "biomarkers")
biomarkers_directory <- here("images", "biomarkers")
directories <- list(boxplot_directory, line_directory, violin_directory, biomarkers_directory)
parent_directory <- here("images")
historical_images_directory <- here("images", "historical")
# function to move files and copy the most recent one
move_most_recent_file <- function(directory) {
# list all files in the child directories
files <- list.files(directory, pattern = "\\.png$", full.names = TRUE)
# skip if no files are found
if (length(files) == 0) {
return(NULL)
}
# grab the most recent file based on modification time
most_recent_file <- files[which.max(file.info(files)$mtime)]
# specify the destination in the parent directory
destination_file <- file.path(parent_directory, basename(most_recent_file))
# copy the most recent file to the parent directory
file.copy(most_recent_file, destination_file, overwrite = TRUE)
}
# list files in the parent directory
parent_files <- list.files(parent_directory, pattern = "\\.png$", full.names = TRUE)
# filter out directories and only get files
parent_files <- parent_files[file.info(parent_files)$isdir == FALSE]
# move files from the parent directory to the historical directory
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
file.remove(parent_files)
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
# update the images README file
source(here("scripts", "update_images_readme.R"))
rm(list = ls()); gc()
pacman::p_load(tidyverse, rio, here)
# define directory where images live and where README file for images needs to be placed
image_dir <- here("images")
# images that I update weekly; needs to be dynamically placed into a READ.md file
patterns <- c("jasper_mean_weight_violin_weekly_time_series_.*\\.png",
"jasper_weight_daily_time_series_.*\\.png",
# "jasper_mean_weight_weekly_time_series_.*\\.png"
"biomarkers_graph_.*\\.png"
)
# define function that grabs the most recent images for each type that exists (pattern defined above)
get_most_recent_file <- function(pattern) {
# list files in image directory
files <- list.files(path = image_dir, pattern = pattern, full.names = TRUE)
# throws error if no images found
if (length(files) == 0) return(NULL)
# if multiple variants of the same type of image exists, order when last created
files <- files[order(file.info(files)$mtime, decreasing = TRUE)]
return(basename(files[1])) # return just the filename, necessary for correct Markdown formatting
}
# initiate empty vector containing lines in README.md file
markdown_lines <- c()
# for each type of image, apply the function to grab most recent one and if exists, write each line
for (pattern in patterns) {
recent_file <- get_most_recent_file(pattern)
if (!is.null(recent_file)) {
markdown_lines <- c(markdown_lines, sprintf("![image info](%s)", recent_file))
} else {
markdown_lines <- c(markdown_lines, "![image info](image_not_found.png)") # placeholder if no image is found
}
}
# indicate where the README file needs to be placed
readme_placement <- file.path(image_dir, "README.md")
# create the README.md file in specified directory
writeLines(markdown_lines, readme_placement)
