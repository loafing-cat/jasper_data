move_most_recet_file <- function(directory) {
# list all files in parent (from prior run) and move them to historical for archive
historical_images_directory  <- file.path(parent_directory, "historical")
files <- list.files(parent_directory, full.names = TRUE)
file.copy(files, historical_images_directory, overwrite = TRUE)
# list all files in child directory
files <- list.files(directory, full.names = TRUE)
# grab most recent file based on time stamp
most_recent_file <- files[which.max(file.info(files)$mtime)]
# specify where to most most recent file
destination_file <- file.path(parent_directory, basename(most_recent_file))
# copy the most recent file to destination
file.copy(most_recent_file, destination_file)
}
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recet_file)
directories <- list(boxplot_directory, line_directory, violin_directory)
parent_directory <- here("images")
move_most_recet_file <- function(directory) {
# list all files in parent (from prior run) and move them to historical for archive
historical_images_directory  <- file.path(parent_directory, "historical")
files <- list.files(parent_directory, full.names = TRUE)
file.copy(files, historical_images_directory, overwrite = TRUE)
# list all files in child directory
files <- list.files(directory, full.names = TRUE)
# grab most recent file based on time stamp
most_recent_file <- files[which.max(file.info(files)$mtime)]
# specify where to most most recent file
destination_file <- file.path(parent_directory, basename(most_recent_file))
# copy the most recent file to destination
file.copy(most_recent_file, destination_file)
}
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recet_file)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
move_most_recent_file <- function(directory) {
# list all files in parent (from prior run) and move them to historical for archive
historical_images_directory  <- file.path(parent_directory, "historical")
files <- list.files(parent_directory, full.names = TRUE)
file.copy(files, historical_images_directory, overwrite = TRUE)
# list all files in child directory
files <- list.files(directory, full.names = TRUE)
# grab most recent file based on time stamp
most_recent_file <- files[which.max(file.info(files)$mtime)]
# specify where to most most recent file
destination_file <- file.path(parent_directory, basename(most_recent_file))
# copy the most recent file to destination
file.copy(most_recent_file, destination_file)
}
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
# pull out the most recent plots for each variant and place it into images directory
boxplot_directory <- here("images", "boxplot")
line_directory <- here("images", "line")
violin_directory <- here("images", "violin")
directories <- list(boxplot_directory, line_directory, violin_directory)
parent_directory <- here("images")
move_most_recent_file <- function(directory) {
# list all files in parent (from prior run) and move them to historical for archive
historical_images_directory  <- file.path(parent_directory, "historical")
# list parent files (from prior run) and move them to historical for archive
parent_files <- list.files(parent_directory, full.names = TRUE)
file.copy(historical_images_directory)
# remove files from parent directory for updated graphs
file.remove(parent.files)
# list all files in child directory
files <- list.files(directory, full.names = TRUE)
# grab most recent file based on time stamp
most_recent_file <- files[which.max(file.info(files)$mtime)]
# specify where to most most recent file
destination_file <- file.path(parent_directory, basename(most_recent_file))
# copy the most recent file to destination
file.copy(most_recent_file, destination_file)
}
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
move_most_recent_file <- function(directory) {
# list all files in parent (from prior run) and move them to historical for archive
historical_images_directory  <- file.path(parent_directory, "historical")
# list parent files (from prior run) and move them to historical for archive
parent_files <- list.files(parent_directory, full.names = TRUE)
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
# remove files from parent directory for updated graphs
file.remove(parent.files)
# list all files in child directory
files <- list.files(directory, full.names = TRUE)
# grab most recent file based on time stamp
most_recent_file <- files[which.max(file.info(files)$mtime)]
# specify where to most most recent file
destination_file <- file.path(parent_directory, basename(most_recent_file))
# copy the most recent file to destination
file.copy(most_recent_file, destination_file)
}
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
move_most_recent_file <- function(directory) {
# list all files in parent (from prior run) and move them to historical for archive
historical_images_directory  <- file.path(parent_directory, "historical")
# list parent files (from prior run) and move them to historical for archive
parent_files <- list.files(parent_directory, full.names = TRUE)
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
# remove files from parent directory for updated graphs
file.remove(parent_files)
# list all files in child directory
files <- list.files(directory, full.names = TRUE)
# grab most recent file based on time stamp
most_recent_file <- files[which.max(file.info(files)$mtime)]
# specify where to most most recent file
destination_file <- file.path(parent_directory, basename(most_recent_file))
# copy the most recent file to destination
file.copy(most_recent_file, destination_file)
}
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
# pull out the most recent plots for each variant and place it into images directory
boxplot_directory <- here("images", "boxplot")
line_directory <- here("images", "line")
violin_directory <- here("images", "violin")
directories <- list(boxplot_directory, line_directory, violin_directory)
parent_directory <- here("images")
move_most_recent_file <- function(directory) {
# Define the "historical" images directory
historical_images_directory <- file.path(parent_directory, "historical")
# Create the "historical" images directory if it doesn't exist
dir.create(historical_images_directory, showWarnings = FALSE)
# List all files in parent (from prior run) and move them to "historical" for archive
parent_files <- list.files(parent_directory, full.names = TRUE)
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
# Remove all files from the parent directory
file.remove(parent_files)
# List all files in child directory
files <- list.files(directory, full.names = TRUE)
# Get the most recent file for each variant
most_recent_files <- map(files, ~ .[which.max(file.info(.)$mtime)])
# Specify where to move the most recent file in the parent directory
destination_files <- file.path(parent_directory, basename(most_recent_files))
# Move the most recent files to the parent directory
map2(most_recent_files, destination_files, file.copy)
}
#   most_recent_file <- files[which.max(file.info(files)$mtime)]
#
#   # specify where to most most recent file
#   destination_file <- file.path(parent_directory, basename(most_recent_file))
#
#   # copy the most recent file to destination
#   file.copy(most_recent_file, destination_file)
# }
#
# # apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
# pull out the most recent plots for each variant and place it into images directory
boxplot_directory <- here("images", "boxplot")
line_directory <- here("images", "line")
violin_directory <- here("images", "violin")
directories <- list(boxplot_directory, line_directory, violin_directory)
parent_directory <- here("images")
# Function to move files and copy the most recent one
move_most_recent_file <- function(directory) {
# Define directories
historical_images_directory <- file.path(parent_directory, "historical")
# Ensure the historical directory exists
if (!dir.exists(historical_images_directory)) {
dir.create(historical_images_directory)
}
# List files in the parent directory
parent_files <- list.files(parent_directory, full.names = TRUE)
# Filter out directories and only get files
parent_files <- parent_files[file.info(parent_files)$isdir == FALSE]
# Move files from the parent directory to the historical directory
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
file.remove(parent_files)
# List all files in the child directory
files <- list.files(directory, full.names = TRUE)
# Skip if no files are found
if (length(files) == 0) {
return(NULL)
}
# Get the most recent file based on modification time
most_recent_file <- files[which.max(file.info(files)$mtime)]
# Specify the destination in the parent directory
destination_file <- file.path(parent_directory, basename(most_recent_file))
# Copy the most recent file to the parent directory
file.copy(most_recent_file, destination_file, overwrite = TRUE)
}
# Apply the function to each directory
directories <- list(boxplot_directory, line_directory, violin_directory)
lapply(directories, move_most_recent_file)
# Function to move files and copy the most recent one
move_most_recent_file <- function(directory) {
# List all files in the child directory
files <- list.files(directory, full.names = TRUE)
# Skip if no files are found
if (length(files) == 0) {
return(NULL)
}
# Get the most recent file based on modification time
most_recent_file <- files[which.max(file.info(files)$mtime)]
# Specify the destination in the parent directory
destination_file <- file.path(parent_directory, basename(most_recent_file))
# Copy the most recent file to the parent directory
file.copy(most_recent_file, destination_file, overwrite = TRUE)
}
# List files in the parent directory
parent_files <- list.files(parent_directory, full.names = TRUE)
# Filter out directories and only get files
parent_files <- parent_files[file.info(parent_files)$isdir == FALSE]
# Move files from the parent directory to the historical directory
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
file.remove(parent_files)
# pull out the most recent plots for each variant and place it into images directory
boxplot_directory <- here("images", "boxplot")
line_directory <- here("images", "line")
violin_directory <- here("images", "violin")
directories <- list(boxplot_directory, line_directory, violin_directory)
parent_directory <- here("images")
# Function to move files and copy the most recent one
move_most_recent_file <- function(directory) {
# List all files in the child directory
files <- list.files(directory, full.names = TRUE)
# Skip if no files are found
if (length(files) == 0) {
return(NULL)
}
# Get the most recent file based on modification time
most_recent_file <- files[which.max(file.info(files)$mtime)]
# Specify the destination in the parent directory
destination_file <- file.path(parent_directory, basename(most_recent_file))
# Copy the most recent file to the parent directory
file.copy(most_recent_file, destination_file, overwrite = TRUE)
}
# List files in the parent directory
parent_files <- list.files(parent_directory, full.names = TRUE)
# Filter out directories and only get files
parent_files <- parent_files[file.info(parent_files)$isdir == FALSE]
# Move files from the parent directory to the historical directory
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
file.remove(parent_files)
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
historical_images_directory <- here("images", "historical")
# Function to move files and copy the most recent one
move_most_recent_file <- function(directory) {
# List all files in the child directory
files <- list.files(directory, full.names = TRUE)
# Skip if no files are found
if (length(files) == 0) {
return(NULL)
}
# Get the most recent file based on modification time
most_recent_file <- files[which.max(file.info(files)$mtime)]
# Specify the destination in the parent directory
destination_file <- file.path(parent_directory, basename(most_recent_file))
# Copy the most recent file to the parent directory
file.copy(most_recent_file, destination_file, overwrite = TRUE)
}
# List files in the parent directory
parent_files <- list.files(parent_directory, full.names = TRUE)
# Filter out directories and only get files
parent_files <- parent_files[file.info(parent_files)$isdir == FALSE]
# Move files from the parent directory to the historical directory
file.copy(parent_files, historical_images_directory, overwrite = TRUE)
file.remove(parent_files)
# apply function to move most recent image for each variant to parent at once
map(directories, move_most_recent_file)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
files
list.files(parent_directory, full.names = TRUE)
list.files(parent_directory, pattern = "\\.png$" full.names = TRUE)
list.files(parent_directory, pattern = "\\.png$", full.names = TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R")
p1
p2
# time-series of weekly averages
p1 <- daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%  # filter origin data to only where complete week data available
group_by(week) %>%
mutate(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE), # compute mean/median weight to add to boxplots
median_weight = median(`Weight (lbs)`, na.rm = TRUE)) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week)) +
geom_boxplot(fill = 'lightblue', color = 'darkblue', alpha = 1) +
geom_point(aes(x = week, y = mean_weight), color = 'red', size = 3) +
geom_line(aes(x = week, y = mean_weight, group = 1)) + # line connecting the mean weight across boxes
geom_text(
aes(x = week, y = mean_weight, label = sprintf('Mean: %.2f lbs', mean_weight)),
vjust = 2.5,
color = 'red'
) +
geom_text(
aes(x = week, y = median_weight, label = sprintf('Median: %.2f lbs', median_weight)),
vjust = -1.5,
color = 'blue'
) +
geom_text(
data = mean_weights,
aes(x = midpoint + 0.05 , y = 9.7, label = sprintf('Change: %.2f lbs', delta)),
vjust = -0.5,
color = 'black'
) +
labs(x = 'Week',
y = 'Weight (lbs)',
title = "Jasper's Weight (lbs) Distribution",
subtitle = paste0(format(min(complete_weeks$Day), "%m/%d/%Y"), ' - ' , format(max(complete_weeks$Day), "%m/%d/%Y"))
) +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(unique(complete_weeks$week)))) +
theme_bw()
p1
# time-series of weekly averages
p1 <- daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%  # filter origin data to only where complete week data available
group_by(week) %>%
mutate(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE), # compute mean/median weight to add to boxplots
median_weight = median(`Weight (lbs)`, na.rm = TRUE)) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week)) +
geom_boxplot(fill = 'lightblue', color = 'darkblue', alpha = 1) +
geom_point(aes(x = week, y = mean_weight), color = 'red', size = 3) +
geom_line(aes(x = week, y = mean_weight, group = 1)) + # line connecting the mean weight across boxes
geom_text(
aes(x = week, y = mean_weight, label = sprintf('Mean: %.2f lbs', mean_weight)),
vjust = 2.5,
color = 'red'
) +
geom_text(
aes(x = week, y = median_weight, label = sprintf('Median: %.2f lbs', median_weight)),
vjust = -1.5,
color = 'blue'
) +
geom_text(
data = mean_weights,
aes(x = midpoint + 0.10 , y = 9.7, label = sprintf('Change: %.2f lbs', delta)),
vjust = -0.5,
color = 'black'
) +
labs(x = 'Week',
y = 'Weight (lbs)',
title = "Jasper's Weight (lbs) Distribution",
subtitle = paste0(format(min(complete_weeks$Day), "%m/%d/%Y"), ' - ' , format(max(complete_weeks$Day), "%m/%d/%Y"))
) +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(unique(complete_weeks$week)))) +
theme_bw()
p1
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
df <- data.frame(
time = c('1104', '803', '110', '1959'),
hour = c('11', '8', '1', '19')
)
df
# load necessary libraries
pacman::p_load(tidyverse, here, rio, lubridate)
length('1104')
nchar('1104')
nchar('110')
?case_when
nchar('1104') = 4
nchar('1104') == 4
temp = ''1104''
temp = '1104'
substr(temp, 2)
substr(temp, start = 1, stop = 2)
# clear environment
rm(list = ls()); gc()
# load necessary libraries
pacman::p_load(tidyverse, here, rio, lubridate)
df <- data.frame(
time = c('1104', '803', '110', '1959', '30'),
hour = c('11', '8', '1', '19', '0')
)
temp = '1104'
substr(temp, 1, 2)
?paste
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
TRUE ~ time
))
df
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 2, stop = 2), ':', substr(time, start = 3, stop = 4))
TRUE ~ time
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 2, stop = 2), ':', substr(time, start = 3, stop = 4)),
TRUE ~ time
))
df
nchar('803')
temp2 = '803'
substr(temp2, start = 1, stop = 1)
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3),
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
TRUE ~ time
))
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
TRUE ~ time
))
df
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2))
TRUE ~ time
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2)),
TRUE ~ time
))
df
tibble(df)
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2)),
TRUE ~ time
)) %>%
mutate(hour_24_fixed = hm(hour_24))
tibble(df)
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2)),
TRUE ~ time
)) %>%
mutate(hour_24_fixed = hm(hour_24),
hour_24_fixed2 = strptime(hour_24))
(hour_24_fixed = hm(hour_24),
# clear environment
rm(list = ls()); gc()
# load necessary libraries
pacman::p_load(tidyverse, here, rio, lubridate)
df <- data.frame(
time = c('1104', '803', '110', '1959', '30'),
hour = c('11', '8', '1', '19', '0')
)
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2)),
TRUE ~ time
)) %>%
mutate(hour_24_fixed = hm(hour_24),
hour_24_fixed2 = strptime(hour_24))
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2)),
TRUE ~ time
)) %>%
mutate(hour_24_fixed = hm(hour_24),
hour_24_fixed2 = strptime(hour_24, format = '%H:%M'))
df
?strptime
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2)),
TRUE ~ time
)) %>%
mutate(hour_24_fixed = hm(hour_24),
hour_24_fixed2 = strptime(hour_24, format = '%H:%M'),
hour_24_fixed3 = parse_date_time(hour_24))
df <- df %>%
mutate(hour_24 = case_when(
nchar(time) == 4 ~ paste0(substr(time, start = 1, stop = 2), ':', substr(time, start = 3, stop = 4)),
nchar(time) == 3 ~ paste0('0', substr(time, start = 1, stop = 1), ':', substr(time, start = 2, stop = 3)),
nchar(time) == 2 ~ paste0('00:', substr(time, start = 1, stop = 2)),
TRUE ~ time
)) %>%
mutate(hour_24_fixed = hm(hour_24),
hour_24_fixed2 = strptime(hour_24, format = '%H:%M'),
hour_24_fixed3 = parse_time(hour_24))
df
df
tibble(df)
?hm
df
source("C:/Users/natha/repos/jasper_data/scripts/fix_time_stamps_lol.R", echo=TRUE)
tibble(df)
?strptime
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
source("C:/Users/natha/repos/jasper_data/scripts/jasper_weekly_daily_weight_plots_secure_script.R", echo=TRUE)
