filter(!is.na(metric))  # exclude entries without metric names
return(data_frame)
}
# parse and label hematology and chemistry data, trimming any whitespace
hematology_df <- parse_section(hematology_text) %>%
mutate(test = "hematology") %>%
mutate_all(str_trim)
chemistry_df <- parse_section(chemistry_text) %>%
mutate(test = "chemistry") %>%
mutate_all(str_trim)
# combine hematology and chemistry data, and rename metrics that weren't extracted correctly
results <- bind_rows(hematology_df, chemistry_df) %>%
mutate(metric = case_when(
metric == "BUN: Creatinine" ~ "BUN: Creatinine Ratio",
metric == "Albumin:" ~ "Albumin: Globulin Ratio",
TRUE ~ metric
))
# specify variable datatypes
results <- results %>%
mutate(
metric = as.character(metric),
value = as.numeric(value),
date_of_result = as.IDate(date_of_result),
test = as.character(test)
)
# create a date variable with different format for exporting
date_for_export <- format(as.Date(formatted_date), "%Y_%m_%d")
# do some clean up and data management
date_updated <- format(as.Date(Sys.Date()), "%Y_%m_%d")
# add an updated date column
date_updated_col <- format(as.Date(Sys.Date()))
old_data <- import(here("output data", "cbc_chem_2024_05_10.csv"))
export(old_data, here("output data", "cbc_chem_updated.csv"), row.names = FALSE, col.names = TRUE)
## need to continuously update file containing all of the hematology and chemistry data: file will be labeled with pattern `cbc_chem_updated_*`
# if said file exists in directory, assign to `file_name` which will be used in an if/else
file_name <- list.files(
path = here("output data"),
pattern = "cbc_chem_updated_.*\\.csv",
full.names = TRUE
)
# there should only be one file that captures all of the hematology/chemistry updates over time; if length is 1 do the following:
if (length(file_name) == 1) {
# import it
old_data <- import(file_name)
# add new data stored in `results` below the last data placed into file
updated_data <- bind_rows(old_data, results) %>%
mutate(date_updated = as.IDate(date_updated_col))
# then then overwrite the file
export(updated_data, file_name)
} else {
# otherwise throw the following error message
message("Error: The file expected to be updated was not found!")
}
## need to continuously update file containing all of the hematology and chemistry data: file will be labeled with pattern `cbc_chem_updated_*`
# if said file exists in directory, assign to `file_name` which will be used in an if/else
file_name <- list.files(
path = here("output data"),
pattern = "cbc_chem_updated.*\\.csv",
full.names = TRUE
)
# there should only be one file that captures all of the hematology/chemistry updates over time; if length is 1 do the following:
if (length(file_name) == 1) {
# import it
old_data <- import(file_name)
# add new data stored in `results` below the last data placed into file
updated_data <- bind_rows(old_data, results) %>%
mutate(date_updated = as.IDate(date_updated_col))
# then then overwrite the file
export(updated_data, file_name)
} else {
# otherwise throw the following error message
message("Error: The file expected to be updated was not found!")
}
# clear environment
rm(list = ls()); gc()
# load or install necessary libraries
pacman::p_load(tidyverse, rio, here, googlesheets4, ggsci, lubridate, dotenv)
# load .env file containing URL to Google Sheet (OPSEC)
load_dot_env()
# read in URL and email associated with Google Sheet from .env file
google_sheet_url <- Sys.getenv("GOOGLE_SHEET_URL")
google_sheet_email <- Sys.getenv("GOOGLE_SHEET_EMAIL")
# add formatted data to the end of a file to differentiate when ran
formatted_date <- format(Sys.Date(), "_%Y_%m_%d")
# authenticate and save token for authorization
gs4_auth(cache = ".secrets", email = google_sheet_email)
# load 7-day average and daily weight sheets
seven_day_avg <- read_sheet(
ss = google_sheet_url, # identifies the Google Sheet
sheet = "7-day Average" # specify which sheet if multiple sheets available
)
daily_weight <- read_sheet(
ss = google_sheet_url,
sheet = "Daily Weight"
)
# convert the `Day` column in spreadsheet to a Date type
daily_weight$Day <- as.Date(daily_weight$Day)
# compute week numbers with `lubridate::week` and adjust to start from May 6th, 2024
baseline_data <- as.Date("2024-05-06")
# week numbers used to track Jasper's weight throughout the 84 (12-week) GS-441524 protocol
daily_weight <- daily_weight %>%
mutate(week = (week(Day) - week(baseline_data) + 1))
# correct weeks for dates before the baseline (i.e., week = 0 prior to May 6th, 2024); using base R
daily_weight$week[daily_weight$Day < baseline_data] <- 0
# determine which weeks have full data i.e., full 7-days and no-NAs
complete_weeks <- daily_weight %>%
group_by(week) %>%
filter(!is.na(`Weight (lbs)`)) %>% # remove days/weeks that are NAs
mutate(freq = n()) %>%
filter(freq == 7) %>%  # a completed week must have 7-days of non-NA measurements
ungroup()
# compute the mean weight for each week - used in plots
mean_weight <- complete_weeks %>%
group_by(week) %>%
summarize(mean_weight = mean(`Weight (lbs)`, na.rm = TRUE)) # na.rm = TRUE optional since already taken care above
# compute changes between consecutive weeks - used in plots
mean_weights <- mean_weight %>%
mutate(
week_next = lead(week),
mean_next = lead(mean_weight),
delta = mean_next - mean_weight,
midpoint = (week + week_next) / 2 # used to plot the delta every 0.5 weeks on the main plot
)
tibble(daily_weight)
?scale_fill_d3
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, name = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3(discrete = TRUE) +
theme_ipsum() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, name = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3(discrete = TRUE) +
theme_ipsum() +
theme(legend.position = "none")
?scale_fill_d3()
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, name = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_ipsum() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, name = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_ipsum() +
theme(legend.position = "none")
# load or install necessary libraries
pacman::p_load(tidyverse, rio, here, googlesheets4, ggsci, lubridate, dotenv, hrbrthemes)
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, name = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_ipsum() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, name = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3(discrete = TRUE) +
theme_ipsum() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week)) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_d3() +
theme_minimal() +
theme(legend.position = "none")
# load or install necessary libraries
pacman::p_load(tidyverse, rio, here, googlesheets4, ggsci, lubridate, dotenv, viridis)
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
# scale_fill_d3() +
scale_fill_viridis(discrete = TRUE) +
theme_minimal() +
theme(legend.position = "none")
# making violin -----------------------------------------------------------
npg_palette_alpha_0.7 <- c("#E64B35B2", "#4DBBD5B2", "#00A087B2", "#3C5488B2", "#F39B7FB2", "#8491B4B2", "#91D1C2B2", "#DC0000B2", "#7E6148B2")
npg_palette_alpha_1 <-  c("#E64B35FF", "#4DBBD5FF", "#00A087FF", "#3C5488FF", "#F39B7FFF", "#8491B4FF", "#91D1C2FF", "#DC0000FF", "#7E6148FF")
custom_colors <- c("#F39B7FFF", "#4DBBD5FF", "#91D1C2FF", "#3C5488FF", "#8491B4B2", "#7E6148FF", "#DC0000B2")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
geom_jitter() +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
geom_jitter(color="grey", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
geom_point() +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "grey", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
custom_colors <- c("#F39B7FFF", "#4DBBD5FF", "#91D1C2FF", "#93b3fc", "#8491B4B2", "#7E6148FF", "#DC0000B2")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
# load or install necessary libraries
pacman::p_load(tidyverse, rio, here, googlesheets4, ggsci, lubridate, dotenv, viridis, PupillometryR)
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat(width = 1.4) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),adjust = .2) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
width = 1.4
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(position = position_nudge(y = 0.2), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(position = position_nudge(y = -2.0), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(position = position_nudge(x = 0.1), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(position = position_nudge(x = -0.1), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(width = 1.4) +
geom_boxplot(position = position_nudge(x = -0.15), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0),adjust = 2) +
geom_boxplot(position = position_nudge(x = -0.15), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), adjust = 2) +
geom_boxplot(position = position_nudge(x = -0.15), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), adjust = 2) +
geom_boxplot(position = position_nudge(x = -0.15), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = .15), size = .25) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), adjust = 2) +
geom_boxplot(position = position_nudge(x = -0.15), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = .15), size = .25, alpha = 0.8, color = "black") +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), adjust = 2) +
geom_boxplot(position = position_nudge(x = -0.15), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = .15), size = 1.0, alpha = 0.8, color = "black") +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
# violin with boxplot
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_violin(width = 1.4) +
geom_boxplot(width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = 0.15), alpha = 0.8, size = 1.5) +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
# rain cloud plot
daily_weight %>%
filter(Day %in% complete_weeks$Day) %>%
ggplot(aes(x = week, y = `Weight (lbs)`, group = week, fill = factor(week))) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), adjust = 2) +
geom_boxplot(position = position_nudge(x = -0.15), width = 0.1, color = "black", alpha = 0.2) +
geom_point(position = position_jitter(width = .15), size = 1.0, alpha = 0.8, color = "black") +
# geom_jitter(color="black", size=0.7, alpha=0.5) +
scale_fill_manual(values = custom_colors) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
